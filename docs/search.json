[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi hi, mình là Kiên"
  },
  {
    "objectID": "posts/sql-tutorial/index.html",
    "href": "posts/sql-tutorial/index.html",
    "title": "SQL Tutorial",
    "section": "",
    "text": "SQL Tutorial\nWelcome to my SQL learning journal! In this blog, we will embark on an exciting journey to explore the world of Structured Query Language (SQL). SQL is a powerful tool used for managing and manipulating data in relational databases. Whether you’re a beginner or an experienced data professional, this blog will provide you with valuable insights, tips, and tutorials to enhance your SQL skills. So, let’s dive in and unlock the potential of SQL together!"
  },
  {
    "objectID": "posts/docker-tutorial/index.html",
    "href": "posts/docker-tutorial/index.html",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Ghi chú lại những tổng kết quan trọng trong quá trình học và thực hành Docker\n\n\n\n\n\n\n\n\n\nDocker là một nền tảng ảo hóa dựa trên container, giúp đơn giản hóa quá trình triển khai và quản lý ứng dụng. Containers là môi trường đóng gói chứa tất cả những thứ cần thiết để chạy một ứng dụng, bao gồm mã nguồn, thư viện, biến môi trường và cài đặt hệ thống.\n\n\n\n\n\nMột image là một môi trường đóng gói có chứa tất cả các thông tin cần thiết để chạy một ứng dụng, bao gồm cả hệ điều hành, thư viện, và ứng dụng cụ thể.\ndocker pull ubuntu:latest\n\n\n\nContainer là một thực thể chạy của một image. Nó cung cấp một môi trường cô lập để chạy ứng dụng mà không ảnh hưởng đến hệ thống chủ.\ndocker run -d -p 8080:80 --name my-container my-app\n\n\n\nDockerfile là một tệp văn bản chứa các hướng dẫn để tạo một image. Nó mô tả cách image nên được xây dựng.\n# Dockerfile example\nFROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD [\"npm\", \"start\"]\n\n\n\nDocker Compose là công cụ giúp định nghĩa và chạy các dịch vụ được đóng gói trong các containers. Nó giúp quản lý nhiều containers và các cài đặt liên quan.\nversion: '3'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n\n\n\nDocker Registry là nơi lưu trữ và chia sẻ các images. Docker Hub là một ví dụ của Docker Registry.\ndocker push username/my-app:latest\n\n\n\n\n\n\n\n\n\n\n\n\n\nLệnh\nTùy Chọn / Tham Số\nChức Năng\nViết Tắt\n\n\n\n\ndocker run\n-d\nChạy container ở chế độ nền (detached).\nDetached\n\n\n\n--name\nĐặt tên cho container.\nName\n\n\n\n--publish (-p)\nChuyển tiếp cổng giữa máy host và container.\nPort\n\n\n\n--volume (-v)\nMount thư mục hoặc volume giữa máy host và container.\nVolume\n\n\ndocker build\n-t\nGắn thêm thông tin về thời gian (timestamps).\nTag\n\n\ndocker exec\n-i\nMở chế độ tương tác khi chạy lệnh trong container.\nInteractive\n\n\n\n-t\nTạo một pseudo-TTY để tương tác với container.\nTTY\n\n\ndocker-compose\n-f\nChỉ định Docker Compose file.\nFile\n\n\n\n\n\n\nNgắn Gọn: DevContainer là một khái niệm trong Docker giúp đơn giản hóa quá trình cấu hình môi trường phát triển. Nó sử dụng Docker để xây dựng một container chứa môi trường phát triển cụ thể cho một dự án, giúp đảm bảo rằng tất cả các thành viên trong đội làm việc trên cùng một nền tảng.\nTại sao Nên Sử Dụng DevContainer?\n\nĐồng Nhất Môi Trường Phát Triển:\n\nDevContainer giúp đảm bảo rằng mọi người trong đội làm việc với cùng một môi trường phát triển, tránh sự không nhất quán và xung đột.\n\nDễ Quản Lý và Phát Triển:\n\nCấu hình được xác định trong một tệp cấu hình, giúp quản lý dự án và môi trường phát triển trở nên đơn giản.\n\nTích Hợp Dễ Dàng với IDE:\n\nCác IDE phổ biến như Visual Studio Code hỗ trợ nhanh chóng và dễ dàng tích hợp DevContainer vào quá trình phát triển.\n\n\n\n\nDưới đây là bảng chi tiết với các tùy chọn cụ thể của mỗi thuộc tính trong devcontainer.json:\n\n\n\n\n\n\n\n\n\nThuộc Tính\nTùy Chọn\nMô Tả\nVí Dụ\n\n\n\n\nname\n-\nTên của DevContainer, cung cấp nhãn cho môi trường phát triển.\n\"Node.js\"\n\n\nimage\n-\nTên của hình ảnh trong một container registry (Docker Hub, GitHub Container Registry, Azure Container Registry) mà VS Code sẽ sử dụng để tạo DevContainer.\n\"mcr.microsoft.com/devcontainers/javascript-node:0-18\"\n\n\ndockerfile\n-\nCho phép sử dụng một Dockerfile tùy chỉnh thay vì tham chiếu đến một hình ảnh.\n\"Dockerfile\"\n\n\ncustomizations\nvscode\nCấu hình các thuộc tính cụ thể cho từng công cụ, chẳng hạn như cài đặt và cấu hình extensions cho VS Code.\n\"customizations\": { \"vscode\": { \"settings\": {}, \"extensions\": [\"streetsidesoftware.code-spell-checker\"] } }\n\n\nsettings\n-\nThêm giá trị mặc định từ settings.json vào một tệp cài đặt riêng biệt dành cho container/máy, chẳng hạn như \"terminal.integrated.defaultProfile.linux\": \"bash\".\n\"settings\": { \"terminal.integrated.defaultProfile.linux\": \"bash\" }\n\n\nextensions\n-\nMột mảng các ID của extensions cần được cài đặt bên trong container khi nó được tạo.\n\"extensions\": [\"streetsidesoftware.code-spell-checker\"]\n\n\nforwardPorts\n-\nLiệt kê các cổng bên trong container mà bạn muốn sẵn sàng ở cổng cục bộ.\n\"forwardPorts\": [3000]\n\n\nportsAttributes\n-\nĐặt các thuộc tính mặc định cho các cổng được chuyển tiếp cụ thể.\n\"portsAttributes\": { \"3000\": { \"label\": \"Hello Remote World\", \"onAutoForward\": \"notify\" } }\n\n\npostCreateCommand\n-\nMột chuỗi lệnh hoặc danh sách đối số lệnh để chạy sau khi container được tạo.\n\"postCreateCommand\": \"yarn install\"\n\n\nremoteUser\n-\nGhi đè người dùng mà VS Code chạy như trong container (cùng với các tiến trình con). Mặc định là containerUser.\n\"remoteUser\": \"root\"\n\n\nfeatures\n-\nMột đối tượng chứa các tính năng cụ thể của Dev Container để thêm vào.\n\"features\": { \"my-feature\": true }\n\n\nbuild\ndockerfile, context\nĐối tượng mô tả cách xây dựng Dev Container từ Dockerfile hoặc Docker Compose.\n\"build\": { \"dockerfile\": \"Dockerfile\", \"context\": \"..\" }\n\n\nrunArgs\n-\nMảng các đối số thêm vào lệnh docker run khi khởi chạy container.\n\"runArgs\": [\"--user\", \"1000:1000\"]\n\n\npostCreateCommand\n-\nMột chuỗi lệnh hoặc danh sách đối số lệnh để chạy sau khi container được tạo.\n\"postCreateCommand\": \"yarn install\"\n\n\nshutdownAction\nstopContainer, none\nHành động mà VS Code sẽ thực hiện khi bạn đóng một cửa sổ hoặc tab trong đó Dev Container đang chạy.\n\"shutdownAction\": \"stopContainer\"\n\n\noverrideCommand\n-\nMột lệnh hoặc danh sách đối số lệnh để thay thế lệnh mặc định khi khởi chạy container.\n\"overrideCommand\": \"npm start\"\n\n\nremoteUser\n-\nGhi đè người dùng mà VS Code chạy như trong container (cùng với các tiến trình con). Mặc định là containerUser.\n\"remoteUser\": \"root\"\n\n\nworkspaceFolder\n/workspace\nĐường dẫn trong container mà mọi hoạt động của VS Code sẽ được thực hiện trong đó.\n\"workspaceFolder\": \"/workspace\"\n\n\nworkspaceMount\n-\nCấu hình mount của thư mục workspace từ máy host vào container.\n\n\n\n\nChú Ý: - Mỗi tùy chọn cụ thể của thuộc tính được liệt kê trong cột “Tùy Chọn” của bảng. - Các giải thích chi tiết cung cấp hiểu biết về mục đích và cách sử dụng mỗi tùy chọn cụ thể. - Các ví dụ minh họa giúp làm rõ cách áp dụng mỗi tùy chọn trong một ngữ cảnh thực tế.\n\n\n\n\n\n\nvscode:\n\nsettings: Cấu hình settings.json cho VS Code bên trong container.\n\nVí Dụ: { \"settings\": { \"python.linting.enabled\": true } }\n\nextensions: Danh sách các extension ID cần cài đặt trong VS Code.\n\nVí Dụ: [\"ms-python.python\"]\n\n\n\n\n\n\n\n&lt;setting&gt;: Các thuộc tính cụ thể của settings.json.\n\nVí Dụ: { \"terminal.integrated.defaultProfile.linux\": \"bash\" }\n\n\n\n\n\n\n&lt;extension&gt;: ID của extension cần được cài đặt.\n\nVí Dụ: [\"streetsidesoftware.code-spell-checker\"]\n\n\n\n\n\n\n&lt;port&gt;: Cổng bên trong container mà bạn muốn sẵn sàng ở cổng cục bộ.\n\nVí Dụ: [3000, 5000]\n\n\n\n\n\n\n&lt;port&gt;:\n\nlabel: Nhãn mô tả cho cổng được chuyển tiếp.\n\nVí Dụ: \"Hello Remote World\"\n\nonAutoForward: Hành động khi cổng được chuyển tiếp tự động (notify/silent).\n\nVí Dụ: \"notify\"\n\n\n\n\n\n\n\n&lt;command&gt;: Chuỗi lệnh hoặc danh sách đối số lệnh để chạy sau khi container được tạo.\n\nVí Dụ: \"yarn install\"\n\n\n\n\n\n\nGiải Thích Ngắn Gọn: - Xác định tên dự án cho Docker Compose giúp phân biệt giữa các tài nguyên được tạo bởi cùng một file docker-compose.yml khi chúng chia sẻ không gian tên.\nVí Dụ:\ndocker-compose -p myproject up -d\n\n\n\nGiải Thích Ngắn Gọn: - Liên kết nhiều container cho phép chúng giao tiếp và làm việc cùng nhau, tạo ra một môi trường ứng dụng phức tạp với nhiều thành phần.\nVí Dụ:\nservices:\n  web:\n    image: nginx\n  api:\n    image: myapi\n  database:\n    image: postgres\n\n\n\nGiải Thích Ngắn Gọn: - Cấu hình các container riêng lẻ cho phép định rõ các thiết lập đặc biệt cho từng dịch vụ, giảm sự phụ thuộc giữa chúng.\nVí Dụ:\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n  api:\n    image: myapi\n    environment:\n      - DATABASE_URL=mydatabase\n  database:\n    image: postgres\n    volumes:\n      - ./data:/var/lib/postgresql/data\n\n\n\nGiải Thích Ngắn Gọn: - Phát triển trên một Docker host từ xa giúp lập trình viên làm việc trên môi trường mô phỏng, giả lập môi trường sản xuất một cách chính xác.\nVí Dụ:\ndocker-compose -H ssh://user@remote-host up -d\n\n\n\nversion: '3'\n\nservices:\n  frontend:\n    image: frontend\n    networks:\n      - mynetwork\n  backend:\n    image: backend\n    networks:\n      - mynetwork\n  database:\n    image: postgres\n    networks:\n      - mynetwork\n    volumes:\n      - ./data:/var/lib/postgresql/data\n\nnetworks:\n  mynetwork:\n\nDự án Docker Compose có tên là “myproject”.\nKết nối ba container (frontend, backend, database) trên một mạng có tên “mynetwork”.\nMỗi container có cấu hình riêng với cổng, biến môi trường, và thư mục dữ liệu.\nDự án cho phép phát triển cả ba container trên một Docker host từ xa nếu cần thiết.\n\n\n\n\n\n\n\nDockerfile là một tệp văn bản chứa một loạt các lệnh, mỗi lệnh đại diện cho một bước trong quá trình xây dựng một hình ảnh Docker. Nó mô tả cách một hình ảnh nên được xây dựng từ các thành phần khác nhau và cài đặt các phần mềm cần thiết.\n\n\n\n\n\n\n\n\n\n\n\nLệnh\nMô Tả\nVí Dụ\n\n\n\n\nFROM\nChọn hình ảnh cơ sở để bắt đầu xây dựng.\nFROM ubuntu:latest\n\n\nCOPY\nSao chép các tệp từ máy host vào hình ảnh.\nCOPY app.py /app/\n\n\nADD\nSao chép các tệp từ máy host hoặc URL vào hình ảnh.\nADD https://example.com/file.txt /app/\n\n\nRUN\nThực hiện các lệnh trong môi trường hình ảnh và tạo lớp mới.\nRUN apt-get update && apt-get install -y curl\n\n\nWORKDIR\nĐặt thư mục làm việc cho các lệnh sau đó.\nWORKDIR /app\n\n\nEXPOSE\nMô tả các cổng mà ứng dụng sẽ lắng nghe khi chạy.\nEXPOSE 80/tcp\n\n\nENV\nĐặt các biến môi trường cho hình ảnh.\nENV NODE_ENV production\n\n\nCMD hoặc ENTRYPOINT\nXác định lệnh mặc định khi container được chạy.\nCMD [\"python\", \"app.py\"]\n\n\nARG\nĐịnh nghĩa các biến mà người dùng có thể truyền vào lúc xây dựng.\nARG version=latest\n\n\nLABEL\nThêm các metadata (nhãn) vào hình ảnh.\nLABEL maintainer=\"admin@example.com\"\n\n\nVOLUME\nChỉ định các thư mục làm thư mục volume và được dùng để lưu trữ dữ liệu.\nVOLUME /data\n\n\nRUN, CMD, ENTRYPOINT\nCác lệnh có thể sử dụng dưới dạng shell hoặc mảng đối số.\nRUN apt-get update && apt-get install -y curl\n\n\n\nLưu Ý: - Một Dockerfile thường bắt đầu bằng lệnh FROM. - Các lệnh được thực thi theo thứ tự từ trên xuống dưới trong Dockerfile. - Có thể kết hợp nhiều lệnh trong một dòng bằng cách sử dụng &&. - Các lệnh CMD và ENTRYPOINT giúp xác định hành động mặc định khi container chạy.\nDockerfile là công cụ quan trọng để xây dựng hình ảnh Docker và tự động hóa quy trình triển khai ứng dụng.\n\n\n\n\nDocker Compose là công cụ giúp quản lý và triển khai ứng dụng đa-container trong môi trường Docker. Dưới đây là một bảng tổng hợp các lệnh và thuộc tính quan trọng trong Docker Compose:\n\n\n\n\n\n\n\n\n\n\nLệnh\nThuộc Tính\nKiểu Dữ Liệu\nMô Tả Chi Tiết\nVí Dụ\n\n\n\n\ndocker-compose up\n-\n-\nChạy các dịch vụ được định nghĩa trong file docker-compose.yml.\ndocker-compose up\n\n\ndocker-compose down\n-\n-\nDừng và xóa tất cả các container, mạng và dữ liệu đã tạo.\ndocker-compose down\n\n\ndocker-compose ps\n-\n-\nLiệt kê các container đang chạy.\ndocker-compose ps\n\n\ndocker-compose exec\n-\n-\nThực hiện lệnh bên trong một container.\ndocker-compose exec webserver ls\n\n\ndocker-compose logs\n-\n-\nXem logs của các dịch vụ.\ndocker-compose logs\n\n\ndocker-compose build\n-\n-\nXây dựng lại các images của dịch vụ.\ndocker-compose build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThuộc Tính\nKiểu Dữ Liệu\nMô Tả Chi Tiết\nVí Dụ\n\n\n\n\nversion\n-\nPhiên bản của Docker Compose.\nversion: '3'\n\n\nservices\n-\nĐịnh nghĩa các dịch vụ, mỗi dịch vụ có các cài đặt riêng.\nservices: web, db\n\n\nimage\n-\nTên hình ảnh của dịch vụ.\nimage: nginx:latest\n\n\nbuild\n-\nXây dựng dịch vụ từ Dockerfile trong thư mục hiện tại hoặc chỉ định.\nbuild: ./web\n\n\nports\n-\nChuyển tiếp cổng giữa máy host và container.\nports: - \"8080:80\"\n\n\nvolumes\n-\nMount thư mục hoặc volume giữa máy host và container.\nvolumes: - ./data:/app/data\n\n\nenvironment\n-\nĐặt biến môi trường cho dịch vụ.\nenvironment: - DEBUG=True\n\n\ndepends_on\n-\nXác định các dịch vụ phụ thuộc cần chạy trước.\ndepends_on: - db\n\n\n\n\n\n\nversion: '3'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./web:/app\n    environment:\n      - DEBUG=True\n  db:\n    image: postgres:latest\n    volumes:\n      - /var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=mysecretpassword\n\nĐịnh nghĩa hai dịch vụ: web (nginx) và db (PostgreSQL).\nDịch vụ web sử dụng hình ảnh nginx, chuyển tiếp cổng 8080 từ máy host vào cổng 80 của container, mount thư mục ./web vào /app, và đặt biến môi trường DEBUG là True.\nDịch vụ db sử dụng hình ảnh PostgreSQL, mount thư mục dữ liệu vào /var/lib/postgresql/data, và đặt mật khẩu PostgreSQL."
  },
  {
    "objectID": "posts/docker-tutorial/index.html#docker-là-gì",
    "href": "posts/docker-tutorial/index.html#docker-là-gì",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Docker là một nền tảng ảo hóa dựa trên container, giúp đơn giản hóa quá trình triển khai và quản lý ứng dụng. Containers là môi trường đóng gói chứa tất cả những thứ cần thiết để chạy một ứng dụng, bao gồm mã nguồn, thư viện, biến môi trường và cài đặt hệ thống."
  },
  {
    "objectID": "posts/docker-tutorial/index.html#các-khái-niệm-cơ-bản",
    "href": "posts/docker-tutorial/index.html#các-khái-niệm-cơ-bản",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Một image là một môi trường đóng gói có chứa tất cả các thông tin cần thiết để chạy một ứng dụng, bao gồm cả hệ điều hành, thư viện, và ứng dụng cụ thể.\ndocker pull ubuntu:latest\n\n\n\nContainer là một thực thể chạy của một image. Nó cung cấp một môi trường cô lập để chạy ứng dụng mà không ảnh hưởng đến hệ thống chủ.\ndocker run -d -p 8080:80 --name my-container my-app\n\n\n\nDockerfile là một tệp văn bản chứa các hướng dẫn để tạo một image. Nó mô tả cách image nên được xây dựng.\n# Dockerfile example\nFROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD [\"npm\", \"start\"]\n\n\n\nDocker Compose là công cụ giúp định nghĩa và chạy các dịch vụ được đóng gói trong các containers. Nó giúp quản lý nhiều containers và các cài đặt liên quan.\nversion: '3'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n\n\n\nDocker Registry là nơi lưu trữ và chia sẻ các images. Docker Hub là một ví dụ của Docker Registry.\ndocker push username/my-app:latest"
  },
  {
    "objectID": "posts/docker-tutorial/index.html#các-lệnh-thường-dùng",
    "href": "posts/docker-tutorial/index.html#các-lệnh-thường-dùng",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Lệnh\nTùy Chọn / Tham Số\nChức Năng\nViết Tắt\n\n\n\n\ndocker run\n-d\nChạy container ở chế độ nền (detached).\nDetached\n\n\n\n--name\nĐặt tên cho container.\nName\n\n\n\n--publish (-p)\nChuyển tiếp cổng giữa máy host và container.\nPort\n\n\n\n--volume (-v)\nMount thư mục hoặc volume giữa máy host và container.\nVolume\n\n\ndocker build\n-t\nGắn thêm thông tin về thời gian (timestamps).\nTag\n\n\ndocker exec\n-i\nMở chế độ tương tác khi chạy lệnh trong container.\nInteractive\n\n\n\n-t\nTạo một pseudo-TTY để tương tác với container.\nTTY\n\n\ndocker-compose\n-f\nChỉ định Docker Compose file.\nFile"
  },
  {
    "objectID": "posts/docker-tutorial/index.html#devcontainer-là-gì",
    "href": "posts/docker-tutorial/index.html#devcontainer-là-gì",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Ngắn Gọn: DevContainer là một khái niệm trong Docker giúp đơn giản hóa quá trình cấu hình môi trường phát triển. Nó sử dụng Docker để xây dựng một container chứa môi trường phát triển cụ thể cho một dự án, giúp đảm bảo rằng tất cả các thành viên trong đội làm việc trên cùng một nền tảng.\nTại sao Nên Sử Dụng DevContainer?\n\nĐồng Nhất Môi Trường Phát Triển:\n\nDevContainer giúp đảm bảo rằng mọi người trong đội làm việc với cùng một môi trường phát triển, tránh sự không nhất quán và xung đột.\n\nDễ Quản Lý và Phát Triển:\n\nCấu hình được xác định trong một tệp cấu hình, giúp quản lý dự án và môi trường phát triển trở nên đơn giản.\n\nTích Hợp Dễ Dàng với IDE:\n\nCác IDE phổ biến như Visual Studio Code hỗ trợ nhanh chóng và dễ dàng tích hợp DevContainer vào quá trình phát triển.\n\n\n\n\nDưới đây là bảng chi tiết với các tùy chọn cụ thể của mỗi thuộc tính trong devcontainer.json:\n\n\n\n\n\n\n\n\n\nThuộc Tính\nTùy Chọn\nMô Tả\nVí Dụ\n\n\n\n\nname\n-\nTên của DevContainer, cung cấp nhãn cho môi trường phát triển.\n\"Node.js\"\n\n\nimage\n-\nTên của hình ảnh trong một container registry (Docker Hub, GitHub Container Registry, Azure Container Registry) mà VS Code sẽ sử dụng để tạo DevContainer.\n\"mcr.microsoft.com/devcontainers/javascript-node:0-18\"\n\n\ndockerfile\n-\nCho phép sử dụng một Dockerfile tùy chỉnh thay vì tham chiếu đến một hình ảnh.\n\"Dockerfile\"\n\n\ncustomizations\nvscode\nCấu hình các thuộc tính cụ thể cho từng công cụ, chẳng hạn như cài đặt và cấu hình extensions cho VS Code.\n\"customizations\": { \"vscode\": { \"settings\": {}, \"extensions\": [\"streetsidesoftware.code-spell-checker\"] } }\n\n\nsettings\n-\nThêm giá trị mặc định từ settings.json vào một tệp cài đặt riêng biệt dành cho container/máy, chẳng hạn như \"terminal.integrated.defaultProfile.linux\": \"bash\".\n\"settings\": { \"terminal.integrated.defaultProfile.linux\": \"bash\" }\n\n\nextensions\n-\nMột mảng các ID của extensions cần được cài đặt bên trong container khi nó được tạo.\n\"extensions\": [\"streetsidesoftware.code-spell-checker\"]\n\n\nforwardPorts\n-\nLiệt kê các cổng bên trong container mà bạn muốn sẵn sàng ở cổng cục bộ.\n\"forwardPorts\": [3000]\n\n\nportsAttributes\n-\nĐặt các thuộc tính mặc định cho các cổng được chuyển tiếp cụ thể.\n\"portsAttributes\": { \"3000\": { \"label\": \"Hello Remote World\", \"onAutoForward\": \"notify\" } }\n\n\npostCreateCommand\n-\nMột chuỗi lệnh hoặc danh sách đối số lệnh để chạy sau khi container được tạo.\n\"postCreateCommand\": \"yarn install\"\n\n\nremoteUser\n-\nGhi đè người dùng mà VS Code chạy như trong container (cùng với các tiến trình con). Mặc định là containerUser.\n\"remoteUser\": \"root\"\n\n\nfeatures\n-\nMột đối tượng chứa các tính năng cụ thể của Dev Container để thêm vào.\n\"features\": { \"my-feature\": true }\n\n\nbuild\ndockerfile, context\nĐối tượng mô tả cách xây dựng Dev Container từ Dockerfile hoặc Docker Compose.\n\"build\": { \"dockerfile\": \"Dockerfile\", \"context\": \"..\" }\n\n\nrunArgs\n-\nMảng các đối số thêm vào lệnh docker run khi khởi chạy container.\n\"runArgs\": [\"--user\", \"1000:1000\"]\n\n\npostCreateCommand\n-\nMột chuỗi lệnh hoặc danh sách đối số lệnh để chạy sau khi container được tạo.\n\"postCreateCommand\": \"yarn install\"\n\n\nshutdownAction\nstopContainer, none\nHành động mà VS Code sẽ thực hiện khi bạn đóng một cửa sổ hoặc tab trong đó Dev Container đang chạy.\n\"shutdownAction\": \"stopContainer\"\n\n\noverrideCommand\n-\nMột lệnh hoặc danh sách đối số lệnh để thay thế lệnh mặc định khi khởi chạy container.\n\"overrideCommand\": \"npm start\"\n\n\nremoteUser\n-\nGhi đè người dùng mà VS Code chạy như trong container (cùng với các tiến trình con). Mặc định là containerUser.\n\"remoteUser\": \"root\"\n\n\nworkspaceFolder\n/workspace\nĐường dẫn trong container mà mọi hoạt động của VS Code sẽ được thực hiện trong đó.\n\"workspaceFolder\": \"/workspace\"\n\n\nworkspaceMount\n-\nCấu hình mount của thư mục workspace từ máy host vào container.\n\n\n\n\nChú Ý: - Mỗi tùy chọn cụ thể của thuộc tính được liệt kê trong cột “Tùy Chọn” của bảng. - Các giải thích chi tiết cung cấp hiểu biết về mục đích và cách sử dụng mỗi tùy chọn cụ thể. - Các ví dụ minh họa giúp làm rõ cách áp dụng mỗi tùy chọn trong một ngữ cảnh thực tế.\n\n\n\n\n\n\nvscode:\n\nsettings: Cấu hình settings.json cho VS Code bên trong container.\n\nVí Dụ: { \"settings\": { \"python.linting.enabled\": true } }\n\nextensions: Danh sách các extension ID cần cài đặt trong VS Code.\n\nVí Dụ: [\"ms-python.python\"]\n\n\n\n\n\n\n\n&lt;setting&gt;: Các thuộc tính cụ thể của settings.json.\n\nVí Dụ: { \"terminal.integrated.defaultProfile.linux\": \"bash\" }\n\n\n\n\n\n\n&lt;extension&gt;: ID của extension cần được cài đặt.\n\nVí Dụ: [\"streetsidesoftware.code-spell-checker\"]\n\n\n\n\n\n\n&lt;port&gt;: Cổng bên trong container mà bạn muốn sẵn sàng ở cổng cục bộ.\n\nVí Dụ: [3000, 5000]\n\n\n\n\n\n\n&lt;port&gt;:\n\nlabel: Nhãn mô tả cho cổng được chuyển tiếp.\n\nVí Dụ: \"Hello Remote World\"\n\nonAutoForward: Hành động khi cổng được chuyển tiếp tự động (notify/silent).\n\nVí Dụ: \"notify\"\n\n\n\n\n\n\n\n&lt;command&gt;: Chuỗi lệnh hoặc danh sách đối số lệnh để chạy sau khi container được tạo.\n\nVí Dụ: \"yarn install\"\n\n\n\n\n\n\nGiải Thích Ngắn Gọn: - Xác định tên dự án cho Docker Compose giúp phân biệt giữa các tài nguyên được tạo bởi cùng một file docker-compose.yml khi chúng chia sẻ không gian tên.\nVí Dụ:\ndocker-compose -p myproject up -d\n\n\n\nGiải Thích Ngắn Gọn: - Liên kết nhiều container cho phép chúng giao tiếp và làm việc cùng nhau, tạo ra một môi trường ứng dụng phức tạp với nhiều thành phần.\nVí Dụ:\nservices:\n  web:\n    image: nginx\n  api:\n    image: myapi\n  database:\n    image: postgres\n\n\n\nGiải Thích Ngắn Gọn: - Cấu hình các container riêng lẻ cho phép định rõ các thiết lập đặc biệt cho từng dịch vụ, giảm sự phụ thuộc giữa chúng.\nVí Dụ:\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n  api:\n    image: myapi\n    environment:\n      - DATABASE_URL=mydatabase\n  database:\n    image: postgres\n    volumes:\n      - ./data:/var/lib/postgresql/data\n\n\n\nGiải Thích Ngắn Gọn: - Phát triển trên một Docker host từ xa giúp lập trình viên làm việc trên môi trường mô phỏng, giả lập môi trường sản xuất một cách chính xác.\nVí Dụ:\ndocker-compose -H ssh://user@remote-host up -d\n\n\n\nversion: '3'\n\nservices:\n  frontend:\n    image: frontend\n    networks:\n      - mynetwork\n  backend:\n    image: backend\n    networks:\n      - mynetwork\n  database:\n    image: postgres\n    networks:\n      - mynetwork\n    volumes:\n      - ./data:/var/lib/postgresql/data\n\nnetworks:\n  mynetwork:\n\nDự án Docker Compose có tên là “myproject”.\nKết nối ba container (frontend, backend, database) trên một mạng có tên “mynetwork”.\nMỗi container có cấu hình riêng với cổng, biến môi trường, và thư mục dữ liệu.\nDự án cho phép phát triển cả ba container trên một Docker host từ xa nếu cần thiết."
  },
  {
    "objectID": "posts/docker-tutorial/index.html#dockerfile-và-các-lệnh-phổ-biến",
    "href": "posts/docker-tutorial/index.html#dockerfile-và-các-lệnh-phổ-biến",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Dockerfile là một tệp văn bản chứa một loạt các lệnh, mỗi lệnh đại diện cho một bước trong quá trình xây dựng một hình ảnh Docker. Nó mô tả cách một hình ảnh nên được xây dựng từ các thành phần khác nhau và cài đặt các phần mềm cần thiết.\n\n\n\n\n\n\n\n\n\n\n\nLệnh\nMô Tả\nVí Dụ\n\n\n\n\nFROM\nChọn hình ảnh cơ sở để bắt đầu xây dựng.\nFROM ubuntu:latest\n\n\nCOPY\nSao chép các tệp từ máy host vào hình ảnh.\nCOPY app.py /app/\n\n\nADD\nSao chép các tệp từ máy host hoặc URL vào hình ảnh.\nADD https://example.com/file.txt /app/\n\n\nRUN\nThực hiện các lệnh trong môi trường hình ảnh và tạo lớp mới.\nRUN apt-get update && apt-get install -y curl\n\n\nWORKDIR\nĐặt thư mục làm việc cho các lệnh sau đó.\nWORKDIR /app\n\n\nEXPOSE\nMô tả các cổng mà ứng dụng sẽ lắng nghe khi chạy.\nEXPOSE 80/tcp\n\n\nENV\nĐặt các biến môi trường cho hình ảnh.\nENV NODE_ENV production\n\n\nCMD hoặc ENTRYPOINT\nXác định lệnh mặc định khi container được chạy.\nCMD [\"python\", \"app.py\"]\n\n\nARG\nĐịnh nghĩa các biến mà người dùng có thể truyền vào lúc xây dựng.\nARG version=latest\n\n\nLABEL\nThêm các metadata (nhãn) vào hình ảnh.\nLABEL maintainer=\"admin@example.com\"\n\n\nVOLUME\nChỉ định các thư mục làm thư mục volume và được dùng để lưu trữ dữ liệu.\nVOLUME /data\n\n\nRUN, CMD, ENTRYPOINT\nCác lệnh có thể sử dụng dưới dạng shell hoặc mảng đối số.\nRUN apt-get update && apt-get install -y curl\n\n\n\nLưu Ý: - Một Dockerfile thường bắt đầu bằng lệnh FROM. - Các lệnh được thực thi theo thứ tự từ trên xuống dưới trong Dockerfile. - Có thể kết hợp nhiều lệnh trong một dòng bằng cách sử dụng &&. - Các lệnh CMD và ENTRYPOINT giúp xác định hành động mặc định khi container chạy.\nDockerfile là công cụ quan trọng để xây dựng hình ảnh Docker và tự động hóa quy trình triển khai ứng dụng."
  },
  {
    "objectID": "posts/docker-tutorial/index.html#docker-compose-giải-thích-lệnh-và-thuộc-tính",
    "href": "posts/docker-tutorial/index.html#docker-compose-giải-thích-lệnh-và-thuộc-tính",
    "title": "Docker Tutorial",
    "section": "",
    "text": "Docker Compose là công cụ giúp quản lý và triển khai ứng dụng đa-container trong môi trường Docker. Dưới đây là một bảng tổng hợp các lệnh và thuộc tính quan trọng trong Docker Compose:\n\n\n\n\n\n\n\n\n\n\nLệnh\nThuộc Tính\nKiểu Dữ Liệu\nMô Tả Chi Tiết\nVí Dụ\n\n\n\n\ndocker-compose up\n-\n-\nChạy các dịch vụ được định nghĩa trong file docker-compose.yml.\ndocker-compose up\n\n\ndocker-compose down\n-\n-\nDừng và xóa tất cả các container, mạng và dữ liệu đã tạo.\ndocker-compose down\n\n\ndocker-compose ps\n-\n-\nLiệt kê các container đang chạy.\ndocker-compose ps\n\n\ndocker-compose exec\n-\n-\nThực hiện lệnh bên trong một container.\ndocker-compose exec webserver ls\n\n\ndocker-compose logs\n-\n-\nXem logs của các dịch vụ.\ndocker-compose logs\n\n\ndocker-compose build\n-\n-\nXây dựng lại các images của dịch vụ.\ndocker-compose build\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThuộc Tính\nKiểu Dữ Liệu\nMô Tả Chi Tiết\nVí Dụ\n\n\n\n\nversion\n-\nPhiên bản của Docker Compose.\nversion: '3'\n\n\nservices\n-\nĐịnh nghĩa các dịch vụ, mỗi dịch vụ có các cài đặt riêng.\nservices: web, db\n\n\nimage\n-\nTên hình ảnh của dịch vụ.\nimage: nginx:latest\n\n\nbuild\n-\nXây dựng dịch vụ từ Dockerfile trong thư mục hiện tại hoặc chỉ định.\nbuild: ./web\n\n\nports\n-\nChuyển tiếp cổng giữa máy host và container.\nports: - \"8080:80\"\n\n\nvolumes\n-\nMount thư mục hoặc volume giữa máy host và container.\nvolumes: - ./data:/app/data\n\n\nenvironment\n-\nĐặt biến môi trường cho dịch vụ.\nenvironment: - DEBUG=True\n\n\ndepends_on\n-\nXác định các dịch vụ phụ thuộc cần chạy trước.\ndepends_on: - db\n\n\n\n\n\n\nversion: '3'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./web:/app\n    environment:\n      - DEBUG=True\n  db:\n    image: postgres:latest\n    volumes:\n      - /var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=mysecretpassword\n\nĐịnh nghĩa hai dịch vụ: web (nginx) và db (PostgreSQL).\nDịch vụ web sử dụng hình ảnh nginx, chuyển tiếp cổng 8080 từ máy host vào cổng 80 của container, mount thư mục ./web vào /app, và đặt biến môi trường DEBUG là True.\nDịch vụ db sử dụng hình ảnh PostgreSQL, mount thư mục dữ liệu vào /var/lib/postgresql/data, và đặt mật khẩu PostgreSQL."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Chào mừng ghé thăm blog của Kiên, đây là bài đăng đầu tiên"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Docker Tutorial\n\n\n\n\n\n\n\ntutorial\n\n\ncode\n\n\nnotebook\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2023\n\n\nKevil Nguyen\n\n\n\n\n\n\n\n\n\n\n\n\n\nSQL Tutorial\n\n\n\n\n\n\n\ntutorial\n\n\ncode\n\n\nnotebook\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2023\n\n\nKevil Nguyen\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nKevil Nguyen\n\n\n\n\n\n\nNo matching items"
  }
]