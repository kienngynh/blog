---
title: "My Rust Book"
author: "Kevil Nguyen"
date: "2022-02-28"
categories: [tutorial, code, notebook]
---
# My Rust Book
Blog này sẽ tổng hợp lại những kiến thức và từ khoá quan trọng trong ngôn ngữ Rust


## Biến và Tính bất biến

**Bảng tổng hợp:**

| Chủ đề | Tóm tắt | Từ khóa | Ví dụ |
|---|---|---|---|
| Biến | Lưu trữ giá trị | `let`, `mut` | `let x = 5;` |
| Tính bất biến | Giá trị không thể thay đổi sau khi gán | `let` | `let x = 5; // x = 6 sẽ gây lỗi` |
| Tính biến đổi | Giá trị có thể thay đổi sau khi gán | `mut` | `let mut x = 5; x = 6;` |
| Hằng | Giá trị bất biến, được đặt tên | `const` | `const PI: f32 = 3.14159;` |
| Bóng biến | Tạo biến mới với cùng tên trong phạm vi | `let` | `let x = 5; let x = x + 1;` |

**So sánh với Python/C#:**

* Python và C# sử dụng garbage collection để quản lý bộ nhớ, trong khi Rust sử dụng ownership để đảm bảo an toàn bộ nhớ và tránh lỗi memory leak.
* Rust khuyến khích sử dụng tính bất biến theo mặc định để đơn giản hóa code và tránh lỗi, nhưng vẫn cho phép sử dụng tính biến đổi khi cần thiết.

**Ưu nhược điểm:**

* **Tính bất biến:**
    * Ưu điểm: An toàn bộ nhớ, dễ hiểu, tránh lỗi.
    * Nhược điểm: Khó quen hơn so với ngôn ngữ có garbage collection.
* **Tính biến đổi:**
    * Ưu điểm: Linh hoạt hơn trong một số trường hợp.
    * Nhược điểm: Cần chú ý để tránh lỗi và phức tạp hóa code.

**Ứng dụng:**

* Hằng: Lưu trữ các giá trị cố định như PI, tốc độ ánh sáng.
* Biến bất biến: Lưu trữ các giá trị không cần thay đổi, đơn giản hóa code.
* Biến biến đổi: Lưu trữ các giá trị cần thay đổi trong quá trình thực thi.
* Bóng biến: Tạo biến cục bộ với cùng tên, giúp tránh xung đột tên.

**Kết luận:**

Rust cung cấp các tính năng về biến và tính bất biến giúp viết code an toàn, hiệu quả và dễ hiểu. Hiểu rõ các khái niệm này là nền tảng quan trọng để học tập và làm việc với Rust.

## Kiểu dữ liệu

**Điểm chính:**

* **Mọi giá trị trong Rust đều có kiểu dữ liệu.** Điều này cho trình biên dịch biết loại dữ liệu nào nó đang làm việc và cho phép đảm bảo an toàn kiểu.
* **Rust là ngôn ngữ có kiểu dữ liệu tĩnh,** nghĩa là trình biên dịch phải biết kiểu của tất cả các biến tại thời điểm biên dịch.
* **Kiểu dữ liệu có thể được chia thành hai loại:** kiểu đơn giản và kiểu phức tạp.

**Kiểu đơn giản:**

* **Biểu thị các giá trị đơn lẻ.**
* **Bốn kiểu chính:**
    * **Số nguyên:** Biểu thị số nguyên (ví dụ: `i32`, `u64`).
    * **Số thực:** Biểu thị số có phần thập phân (ví dụ: `f32`, `f64`).
    * **Boolean:** Biểu thị giá trị true hoặc false (`bool`).
    * **Ký tự:** Biểu thị ký tự đơn lẻ (`char`).

**Kiểu phức tạp:**

* **Nhóm nhiều giá trị thành một đơn vị.**
* **Hai kiểu cơ bản:**
    * **Tuple:** Các bộ sưu tập có thứ tự, độ dài cố định của các giá trị có thể có kiểu khác nhau (ví dụ: `(500, 6.4, 1)`).
    * **Mảng:** Các bộ sưu tập có độ dài cố định của các giá trị có cùng kiểu (ví dụ: `[1, 2, 3, 4, 5]`).

**Ghi chú bổ sung:**

* Rust áp dụng an toàn kiểu, giúp ngăn chặn lỗi bộ nhớ.
* Tràn số nguyên có thể xảy ra nếu phép toán vượt quá phạm vi của kiểu đã chọn.
* Mảng hữu ích cho dữ liệu có kích thước cố định trên ngăn xếp, trong khi vectơ (được thảo luận trong Chương 8) linh hoạt hơn và có thể tăng hoặc giảm kích thước.

**Tóm lại, hiểu rõ kiểu dữ liệu là điều cần thiết để viết mã Rust chính xác và hiệu quả.**

## Functions: Xây dựng các Khối Mã Tái Sử Dụng

**Chức năng** đóng vai trò là những viên gạch thiết yếu trong Rust, đóng gói các nhiệm vụ hoặc phép toán cụ thể. Chúng cho phép bạn cấu trúc mã hiệu quả, thúc đẩy tái sử dụng mã, đồng thời nâng cao khả năng đọc và bảo trì.

**Khái niệm chính:**

* **Định nghĩa Chức năng:**
    * Sử dụng từ khóa `fn`, tiếp theo là tên chức năng và dấu ngoặc đơn cho các tham số.
    * Dấu ngoặc nhọn `{}` bao quanh phần thân chức năng chứa mã được thực thi.
* **Chữ ký Chức năng:**
    * Bao gồm tên chức năng, danh sách tham số (nếu có) và kiểu trả về (tùy chọn).
    * Ví dụ: `fn plus_one(x: i32) -> i32`
        * `plus_one`: Tên chức năng
        * `x: i32`: Tham số tên `x` có kiểu `i32` (số nguyên)
        * `-> i32`: Trả về giá trị `i32`
* **Tham số và Đối số:**
    * Tham số là các biến được định nghĩa trong chữ ký chức năng.
    * Đối số là các giá trị thực tế được truyền khi gọi chức năng.
    * Ví dụ: `plus_one(5)` truyền đối số `5` cho tham số `x`.
* **Giá trị Trả về:**
    * Chức năng có thể tùy chọn trả về giá trị bằng cách sử dụng từ khóa `return` hoặc ngầm định thông qua biểu thức cuối cùng.
    * Kiểu trả về phải được chỉ định sau mũi tên `->` trong chữ ký.

**Ví dụ: Cộng hai số**

```rust
fn add(x: i32, y: i32) -> i32 {
    x + y
}

fn main() {
    let sum = add(5, 3); // Gọi hàm add với các đối số 5 và 3
    println!("Tổng là: {}", sum);
}
```

**Giải thích:**

1. Hàm `add` lấy hai tham số `i32` (`x` và `y`) và trả về giá trị `i32`.
2. Bên trong hàm, `x` và `y` được cộng lại và kết quả được trả về.
3. Trong hàm `main`, `add` được gọi với các đối số `5` và `3`, gán tổng trả về cho biến `sum`.
4. Giá trị của `sum` được in ra bằng `println!`.

**Gọi Chức năng:**

* Để gọi một chức năng, hãy sử dụng tên của nó theo sau là dấu ngoặc đơn chứa các đối số theo đúng thứ tự và kiểu.
* Đối số được đánh giá trước khi được truyền cho chức năng.

**Lợi ích của việc sử dụng Chức năng:**

* **Tái sử dụng Mã:** Định nghĩa một chức năng một lần và gọi nó từ nhiều vị trí trong mã của bạn.
* **Khả năng đọc được cải thiện:** Chia nhỏ các khối mã lớn thành các chức năng nhỏ hơn được đặt tên tốt, giúp mã dễ hiểu hơn.
* **Khả năng bảo trì:** Việc sửa đổi dễ dàng hơn khi mã được tổ chức thành các chức năng, vì các thay đổi chỉ ảnh hưởng đến chức năng liên quan.

**Lưu ý bổ sung:**

* Chức năng có thể có từ 0 đến nhiều tham số và một giá trị trả về duy nhất.
* Chức năng có thể được định nghĩa bất cứ nơi nào trong mã của bạn, nhưng phải có thể truy cập được từ nơi chúng được gọi.
* Rust áp dụng an toàn kiểu, đảm bảo tính tương thích kiểu giữa các tham số, đối số và giá trị trả về.

## Comments

**Mục đích:**

Giống như nhiều ngôn ngữ lập trình khác, Rust cho phép lập trình viên thêm các bình luận (comment) vào mã nguồn. Bình luận là những đoạn văn bản nhằm giải thích hoặc ghi chú về mã nguồn, nhưng sẽ bị trình biên dịch Rust bỏ qua. Bình luận giúp cho người đọc mã nguồn dễ dàng hiểu được logic và mục đích của từng phần code.

**Kiểu bình luận:**

Rust hỗ trợ hai loại bình luận chính:

1. **Bình luận dòng (line comment):** Bắt đầu bằng hai dấu gạch chéo `//` và kéo dài đến hết dòng.
2. **Bình luận khối (block comment):** Bắt đầu bằng `/*` và kết thúc bằng `*/`. Bình luận khối có thể kéo dài nhiều dòng.

**Ví dụ:**

```rust
// Bình luận dòng
let x = 5; // Gán giá trị 5 cho biến x

/* Bình luận khối
   Giải thích về đoạn code tiếp theo
*/
let y = x * 2;
```

**Vị trí:**

Bình luận có thể được đặt ở nhiều vị trí khác nhau trong mã nguồn:

* Trước một dòng code để giải thích mục đích của dòng đó.
* Sau một dòng code để cung cấp thêm thông tin chi tiết.
* Giữa các dòng code để giải thích logic của một khối code phức tạp.

**Thực hành tốt:**

* Sử dụng bình luận một cách hợp lý, không nên lạm dụng quá nhiều.
* Giữ cho bình luận ngắn gọn và dễ hiểu, tránh sử dụng ngôn ngữ khó hiểu hoặc thuật ngữ chuyên ngành trừ khi cần thiết.
* Cập nhật bình luận khi code thay đổi để đảm bảo tính nhất quán.

Bằng việc sử dụng bình luận hiệu quả, bạn có thể cải thiện đáng kể tính dễ đọc và bảo trì của mã nguồn Rust, giúp cho người khác (và chính bạn trong tương lai) dễ dàng hiểu được logic và mục đích của code.

## Kiểm soát Luồng trong Rust

**Khái niệm:**

Kiểm soát luồng là khả năng thực thi các khối mã khác nhau tùy theo điều kiện và lặp lại một khối mã nhiều lần cho đến khi một điều kiện nào đó được đáp ứng. Trong Rust, các công cụ chính để kiểm soát luồng là **biểu thức if** và **vòng lặp**.

**Biểu thức if:**

* Cho phép rẽ nhánh mã theo các điều kiện.
* Cú pháp:
  ```rust
  if condition {
      // Khối mã được thực thi nếu điều kiện là đúng
  } else {
      // Khối mã được thực thi nếu điều kiện là sai (tùy chọn)
  }
  ```
* `condition` phải là một biểu thức trả về giá trị `bool`.
* Ví dụ:
  ```rust
  let number = 3;

  if number < 5 {
      println!("Điều kiện là đúng");
  } else {
      println!("Điều kiện là sai");
  }
  ```

**Vòng lặp:**

* Cho phép lặp lại một khối mã nhiều lần.
* Rust có 3 loại vòng lặp: `loop`, `while`, và `for`.

**1. Vòng lặp `loop`:**

* Lặp lại vô tận cho đến khi sử dụng lệnh `break` để thoát.
* Ví dụ:
  ```rust
  loop {
      println!("Lặp lại!");
      break; // Thoát khỏi vòng lặp
  }
  ```

**2. Vòng lặp `while`:**

* Lặp lại cho đến khi một điều kiện trở thành `false`.
* Cú pháp:
  ```rust
  while condition {
      // Khối mã được thực thi
  }
  ```
* Ví dụ:
  ```rust
  let mut number = 3;

  while number != 0 {
      println!("{}", number);
      number -= 1;
  }
  ```

**3. Vòng lặp `for`:**

* Lặp lại từng phần tử trong một bộ sưu tập (mảng, danh sách, ...).
* Cú pháp:
  ```rust
  for element in collection {
      // Khối mã được thực thi cho mỗi phần tử
  }
  ```
* Ví dụ:
  ```rust
  let numbers = [1, 2, 3, 4, 5];

  for number in numbers {
      println!("Giá trị: {}", number);
  }
  ```

**Tóm lược:**

Biểu thức `if` và các vòng lặp là công cụ quan trọng để kiểm soát luồng thực thi của chương trình Rust. Việc sử dụng linh hoạt các công cụ này giúp bạn viết code logic và hiệu quả hơn.

## Quyền sở hữu (Ownership) trong Rust

Quyền sở hữu là một khái niệm cốt lõi trong Rust, chi phối cách quản lý và truy cập bộ nhớ trong chương trình của bạn. Nó đảm bảo an toàn bộ nhớ và ngăn chặn các lỗi như rò rỉ bộ nhớ và con trỏ lơ lửng. Dưới đây là phân tích về Quyền sở hữu trong Rust:

**1. Mỗi giá trị trong Rust có một chủ sở hữu (Owner).**
- Chủ sở hữu này là biến giữ giá trị.
- Chỉ có một biến có thể sở hữu một giá trị tại một thời điểm.

**2. Khi chủ sở hữu đi ra khỏi phạm vi, giá trị sẽ bị hủy (drop).**
- Phạm vi xác định khối mã nơi một biến hợp lệ.
- Khi khối mã kết thúc, biến sẽ đi ra khỏi phạm vi và giá trị sở hữu của nó sẽ tự động bị hủy (giải phóng khỏi bộ nhớ).

**3. Có hai cách để tương tác với dữ liệu: di chuyển (move) và sao chép (copy).**
- **Di chuyển:** Khi bạn gán một giá trị (như String) cho một biến khác, quyền sở hữu sẽ được chuyển (di chuyển). Biến ban đầu trở nên không hợp lệ và không thể sử dụng được nữa.
- **Sao chép:** Đối với các kiểu dữ liệu đơn giản như số nguyên (i32), có kích thước đã biết và được lưu trữ trên ngăn xếp, việc gán sẽ tạo ra một bản sao của giá trị. Cả hai biến đều hợp lệ và độc lập.

**4. Quyền sở hữu và Hàm:**
- Việc truyền giá trị cho một hàm thường di chuyển quyền sở hữu, tương tự như việc gán. Hàm trở thành chủ sở hữu mới và giá trị không còn hợp lệ trong phạm vi gọi.
- Trả về giá trị từ hàm cũng có thể chuyển quyền sở hữu. Giá trị trả về trở thành sở hữu của phạm vi gọi.

**5. Tham chiếu (References):**
- Tham chiếu mượn quyền sở hữu của một giá trị mà không chiếm quyền sở hữu chính nó. Chúng cung cấp một cách để truy cập và sử dụng dữ liệu mà không di chuyển nó.
- Tham chiếu đặc biệt hữu ích khi bạn muốn nhiều phần trong mã của mình làm việc với cùng một dữ liệu mà không cần sao chép hoặc lo lắng về quyền sở hữu.

**Lợi ích của Quyền sở hữu:**

- **An toàn bộ nhớ:** Quyền sở hữu ngăn chặn rò rỉ bộ nhớ và con trỏ lơ lửng, làm cho chương trình Rust đáng tin cậy hơn và ít bị lỗi hơn.
- **Cải thiện độ rõ ràng của mã:** Quy tắc sở hữu thực thi quản lý dữ liệu rõ ràng, dẫn đến hành vi mã rõ ràng hơn và dễ dự đoán hơn.
- **Hiệu quả:** Quyền sở hữu loại bỏ nhu cầu quản lý bộ nhớ thủ công (như trong C/C++), có khả năng cải thiện hiệu suất bằng cách tránh các hoạt động bộ nhớ không cần thiết.

**Ghi chú bổ sung:**

- Hàm `drop` được tự động gọi khi một giá trị bị hủy, cho phép thực hiện bất kỳ hành động dọn dẹp nào cần thiết.
- Đặc điểm `Copy` được triển khai cho các kiểu đơn giản như số nguyên, cho biết chúng có thể được sao chép mà không ảnh hưởng đến giá trị ban đầu.
- Hiểu rõ về Quyền sở hữu là điều cần thiết để viết chương trình Rust hiệu quả và an toàn.

Bằng cách nắm vững các nguyên tắc sở hữu này, bạn sẽ có thể phát triển các ứng dụng Rust mạnh mẽ và đáng tin cậy.

## Tham chiếu (References) và Mượn (Borrowing) trong Rust

**Vấn đề với mã tuple trong Liệt kê 4-5 là chúng ta phải trả về giá trị String cho hàm gọi để vẫn có thể sử dụng String sau khi gọi calculate_length, vì String đã được di chuyển vào calculate_length. Thay vào đó, chúng ta có thể cung cấp một tham chiếu (reference) tới giá trị String. Tham chiếu giống như một con trỏ ở chỗ nó là một địa chỉ mà chúng ta có thể theo dõi để truy cập dữ liệu được lưu trữ tại địa chỉ đó; dữ liệu đó thuộc sở hữu của một biến khác. Không giống như con trỏ, tham chiếu được đảm bảo sẽ trỏ đến một giá trị hợp lệ của một kiểu dữ liệu cụ thể trong suốt vòng đời của tham chiếu đó.**

Đây là cách bạn định nghĩa và sử dụng hàm calculate_length có tham chiếu đến một đối tượng làm tham số thay vì lấy quyền sở hữu giá trị:

```rust
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

Đầu tiên, lưu ý rằng tất cả mã tuple trong khai báo biến và giá trị trả về của hàm đã biến mất. Thứ hai, lưu ý rằng chúng ta truyền `&s1` vào `calculate_length` và trong định nghĩa của nó, chúng ta lấy `&String` thay vì `String`. Những dấu ngoặc nhọn này biểu thị **tham chiếu (references)**, và chúng cho phép bạn tham chiếu đến một giá trị nào đó mà không chiếm quyền sở hữu nó. Hình 4-5 mô tả khái niệm này.

[Hình 4-5: Sơ đồ của `&String s` trỏ đến `String s1`]

**Lưu ý:** Phép toán ngược lại của việc tham chiếu bằng cách sử dụng `&` là **hủy tham chiếu (dereferencing)**, được thực hiện bằng toán tử hủy tham chiếu, `*`. Chúng ta sẽ thấy một số cách sử dụng toán tử hủy tham chiếu trong Chương 8 và thảo luận chi tiết về hủy tham chiếu trong Chương 15.

Hãy xem xét kỹ hơn lời gọi hàm ở đây:

```rust
let s1 = String::from("hello");

let len = calculate_length(&s1);
```

Cú pháp `&s1` cho phép chúng ta tạo một tham chiếu **tham chiếu** đến giá trị của `s1` nhưng không sở hữu nó. Vì nó không sở hữu nó, giá trị mà nó trỏ đến sẽ không bị hủy khi tham chiếu ngừng được sử dụng.

Tương tự, chữ ký của hàm sử dụng `&` để chỉ ra rằng kiểu của tham số `s` là một tham chiếu. Hãy thêm một số chú thích giải thích:

```rust
fn calculate_length(s: &String) -> usize { // s là một tham chiếu đến một String
    s.len()
} // Tại đây, s ra khỏi phạm vi. Nhưng vì nó không sở hữu những gì nó tham chiếu đến, nên nó không bị hủy.
```

Phạm vi mà biến `s` hợp lệ giống như bất kỳ phạm vi nào của tham số hàm, nhưng giá trị được tham chiếu bởi tham chiếu không bị hủy khi `s` ngừng được sử dụng, bởi vì `s` không sở hữu. Khi các hàm có tham chiếu làm tham số thay vì các giá trị thực tế, chúng ta sẽ không cần trả về các giá trị để trả lại quyền sở hữu, vì chúng ta chưa bao giờ có quyền sở hữu.

Chúng ta gọi hành động tạo ra một tham chiếu là **mượn (borrowing)**. Giống như trong cuộc sống thực, nếu ai đó sở hữu thứ gì, bạn có thể mượn nó từ họ. Khi bạn xong việc, bạn phải trả lại. Bạn không sở hữu nó.

Vậy, chuyện gì xảy ra nếu chúng ta cố gắng sửa đổi thứ gì đó mà chúng ta đang mượn? Thử mã trong Liệt kê 4-6. Cảnh báo Spoiler: nó không hoạt động!

```rust
fn main() {
    let s = String::from("hello");

    change(&s);
}

fn change(some_string: &String) {
    some_string.push_str(", world");
}
```

Đây là lỗi:

```bash
$ cargo run
   Compiling ownership v0.1.0 (file:///projects/ownership)
error[E0596]: cannot borrow `*some_string` as
```

## String Slices trong Rust: Hướng Dẫn Toàn Diện

**String Slices là gì?**

Trong Rust, String Slices là kiểu dữ liệu cơ bản cho phép bạn tham chiếu một chuỗi ký tự liên tục trong một `String`. Về bản chất, chúng là các tham chiếu được mượn từ một phần của `String`, cho phép bạn làm việc với các phần cụ thể của chuỗi mà không cần sở hữu toàn bộ chuỗi.

**Tại sao nên sử dụng String Slices?**

String Slices mang lại nhiều lợi ích:

1. **Hiệu quả sử dụng bộ nhớ:** Tránh sao chép dữ liệu không cần thiết. Thay vì tạo một chuỗi mới cho mỗi thao tác con chuỗi, bạn có thể sử dụng một slice để truy cập trực tiếp vào phần liên quan của chuỗi gốc. Điều này đặc biệt hữu ích khi xử lý các chuỗi lớn.
2. **Lập trình chức năng:** Slices tích hợp liền mạch với các cấu trúc lập trình chức năng của Rust như iterators và closures, cung cấp cách ngắn gọn và biểu cảm để thao tác với chuỗi.
3. **Mượn và Tham chiếu:** Tuân theo các quy tắc sở hữu và mượn của Rust, đảm bảo an toàn bộ nhớ và ngăn chặn các con trỏ lơ lửng.

**Tạo String Slices**

Bạn có thể tạo String Slices theo hai cách:

1. **Sử dụng String Literals:** String literals (được biểu thị bằng dấu ngoặc kép `"`) tự động được chuyển đổi thành `&str` string slices, là các tham chiếu không thay đổi đến dữ liệu chuỗi được lưu trữ trong nhị phân của chương trình.

   ```rust
   let hello_world = "Hello, world!";
   let hello = &hello_world[0..5]; // Slice từ chỉ mục 0 (bao gồm) đến 5 (không bao gồm)
   ```

2. **Cắt một String:** Bạn có thể tạo một slice của một `String` bằng cách sử dụng cú pháp lập chỉ mục `[start_index..end_index]`. `start_index` (bao gồm) chỉ định ký tự bắt đầu và `end_index` (không bao gồm) chỉ định ký tự sau ký tự cuối cùng được bao gồm trong slice.

   ```rust
   let mut my_string = String::from("Rust is awesome!");
   let awesome = &my_string[11..];  // Slice từ chỉ mục 11 (bao gồm) đến cuối
   ```

**Cú pháp cắt phổ biến:**

- `[start_index..end_index]`: Đây là cú pháp chung, trong đó `start_index` và `end_index` là các biểu thức số nguyên cho biết vị trí bắt đầu và kết thúc của slice (không bao gồm `end_index`).
- `[..end_index]`: Bao gồm tất cả các ký tự từ đầu chuỗi đến, nhưng không bao gồm, `end_index`.
- `[start_index..]`: Bao gồm tất cả các ký tự từ `start_index` (bao gồm) đến cuối chuỗi.
- `[:]`: Bao gồm toàn bộ chuỗi (tương đương với `[..`).

**Điểm chính cần ghi nhớ:**

- String Slices không thay đổi; bạn không thể sửa đổi trực tiếp các ký tự bên trong chúng.
- String Slices mượn từ chuỗi gốc, vì vậy thời gian tồn tại của chúng gắn liền với thời gian tồn tại của chuỗi gốc.
- String Slices nhẹ và không yêu cầu phân bổ bộ nhớ bổ sung trong hầu hết các trường hợp.

**Lưu ý bổ sung:**

- Khi làm việc với string slices chứa văn bản được mã hóa UTF-8, hãy đảm bảo rằng ranh giới slice của bạn căn chỉnh với ranh giới ký tự UTF-8 hợp lệ. Nếu không, bạn có thể gặp lỗi.
- String Slices cung cấp một số phương thức để thao tác chuỗi, chẳng hạn như `iter()`, `len()` và `is_empty()`. Các phương thức này hoạt động trên dữ liệu được mượn và không sửa đổi chuỗi gốc.

**Tóm lại**

String Slices là một công cụ mạnh mẽ và linh hoạt trong Rust để làm việc với các phần cụ thể của chuỗi. Chúng thúc đẩy hiệu quả sử dụng bộ nhớ, tạo điều kiện cho lập trình chức năng và tuân theo các hệ thống sở hữu và mượn của Rust. Bằng cách hiểu cách tạo, cú pháp phổ biến và các điểm chính, bạn có thể sử dụng String Slices hiệu quả trong các chương trình Rust của mìnhepj

## Giải thích thêm về Struct trong Rust

**Ví dụ về Struct:**

Ngoài ví dụ về `User` đã được đề cập, đây là một số ví dụ khác về cách sử dụng struct:

* **Struct để biểu diễn điểm trong không gian 3 chiều:**

```rust
struct Point3D {
    x: f64,
    y: f64,
    z: f64,
}
```

* **Struct để biểu diễn ngày tháng:**

```rust
struct Date {
    year: u32,
    month: u8,
    day: u8,
}
```

* **Struct để biểu diễn một bộ bài:**

```rust
struct Card {
    suit: Suit,
    rank: Rank,
}

enum Suit {
    Hearts,
    Diamonds,
    Clubs,
    Spades,
}

enum Rank {
    Ace,
    Two,
    Three,
    ...
    Ten,
    Jack,
    Queen,
    King,
}
```

**Sử dụng Struct với các hàm:**

Bạn có thể sử dụng struct với các hàm để truyền dữ liệu một cách hiệu quả và dễ đọc. Ví dụ:

```rust
fn greet_user(user: User) {
    println!("Hello, {}!", user.username);
}

fn main() {
    let user1 = User {
        active: true,
        username: String::from("someusername123"),
        email: String::from("someone@example.com"),
        sign_in_count: 1,
    };

    greet_user(user1);
}
```

**Lợi ích của việc sử dụng Struct:**

* **Khả năng đọc:** Struct giúp mã của bạn dễ đọc và dễ hiểu hơn bằng cách nhóm các dữ liệu liên quan lại với nhau.
* **Tính bảo trì:** Struct giúp mã của bạn dễ bảo trì hơn bằng cách cho phép bạn dễ dàng thêm, xóa hoặc sửa đổi các trường.
* **Tái sử dụng:** Bạn có thể sử dụng lại struct trong các phần khác nhau của mã.

**Kết luận:**

Struct là một công cụ mạnh mẽ trong Rust cho phép bạn nhóm các dữ liệu liên quan lại với nhau và tạo ra các kiểu dữ liệu tùy chỉnh. Sử dụng struct có thể giúp mã của bạn dễ đọc, dễ bảo trì và dễ sử dụng lại.

**Ngoài ra:**

* Bạn có thể sử dụng các thuộc tính để thêm metadata vào các struct và trường của chúng.
* Bạn có thể sử dụng các phương thức để thêm chức năng vào struct.
* Bạn có thể sử dụng các trait để cung cấp chức năng chung cho các struct khác nhau.

## Chương trình mẫu sử dụng Struct

Để hiểu khi nào chúng ta có thể sử dụng struct, hãy viết một chương trình tính toán diện tích hình chữ nhật. Chúng ta sẽ bắt đầu bằng cách sử dụng các biến đơn, sau đó cải tiến chương trình cho đến khi sử dụng struct.

Giả sử chúng ta tạo một dự án nhị phân mới với Cargo có tên là `rectangles`, dự án này sẽ lấy chiều rộng và chiều cao của một hình chữ nhật được xác định bằng pixel và tính toán diện tích của hình chữ nhật. Liệt kê 5-8 hiển thị một chương trình ngắn thực hiện chính xác việc đó trong thư mục `src/main.rs` của dự án.

```rust
fn main() {
    let width1 = 30;
    let height1 = 50;

    println!(
        "The area of the rectangle is {} square pixels.",
        area(width1, height1)
    );
}

fn area(width: u32, height: u32) -> u32 {
    width * height
}
```

**Bảng 5-8: Tính toán diện tích của một hình chữ nhật được xác định bởi các biến riêng biệt về chiều rộng và chiều cao**

Bây giờ, hãy chạy chương trình này bằng cách sử dụng `cargo run`:

```
$ cargo run
   Compiling rectangles v0.1.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0.42s
     Running `target/debug/rectangles`
The area of the rectangle is 1500 square pixels.
```

Mã này thành công trong việc tìm ra diện tích của hình chữ nhật bằng cách gọi hàm `area` với mỗi chiều, nhưng chúng ta có thể làm nhiều hơn để mã này rõ ràng và dễ đọc hơn.

Vấn đề với đoạn mã này nằm ở phần khai báo hàm `area`:

```rust
fn area(width: u32, height: u32) -> u32 {
```

Hàm `area` được cho là để tính toán diện tích của một hình chữ nhật, nhưng hàm chúng ta viết có hai tham số và không rõ ràng ở bất kỳ đâu trong chương trình của chúng ta rằng các tham số này có liên quan. Sẽ dễ đọc và dễ quản lý hơn nếu nhóm chiều rộng và chiều cao lại với nhau. Chúng ta đã thảo luận về một cách thực hiện việc đó trong phần "Kiểu Tuple" của Chương 3: bằng cách sử dụng tuple.

**Cải tiến với Tuple**

Liệt kê 5-9 hiển thị một phiên bản khác của chương trình của chúng ta sử dụng tuple.

```rust
fn main() {
    let rect1 = (30, 50);

    println!(
        "The area of the rectangle is {} square pixels.",
        area(rect1)
    );
}

fn area(dimensions: (u32, u32)) -> u32 {
    dimensions.0 * dimensions.1
}
```

**Bảng 5-9: Xác định chiều rộng và chiều cao của hình chữ nhật bằng một tuple**

Theo một cách nào đó, chương trình này tốt hơn. Tuple cho phép chúng ta thêm một chút cấu trúc và bây giờ chúng ta chỉ truyền một đối số. Nhưng theo cách khác, phiên bản này kém rõ ràng hơn: tuple không đặt tên cho các phần tử của chúng, vì vậy chúng ta phải lập chỉ mục vào các phần của tuple, khiến phép tính của chúng ta trở nên kém rõ ràng hơn.

Việc trộn lẫn chiều rộng và chiều cao sẽ không ảnh hưởng đến việc tính toán diện tích, nhưng nếu chúng ta muốn vẽ hình chữ nhật trên màn hình, thì điều đó sẽ quan trọng! Chúng ta phải nhớ rằng `width` là chỉ mục tuple `0` và `height` là chỉ mục tuple `1`. Điều này thậm chí còn khó hơn đối với người khác để tìm ra và ghi nhớ nếu họ sử dụng mã của chúng ta. Bởi vì chúng tôi chưa truyền đạt ý nghĩa của dữ liệu trong mã của mình, nên bây giờ dễ mắc lỗi hơn.

**Cải tiến với Struct: Thêm nhiều ý nghĩa hơn**

Chúng ta sử dụng struct để thêm ý nghĩa bằng cách gắn nhãn cho dữ liệu. Chúng ta có thể chuyển đổi tuple đang sử dụng thành một struct có tên cho toàn bộ và tên cho các phần, như được hiển thị trong Liệt kê 5-10.

```rust
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
        }
    }
```

## Cú pháp phương thức trong Rust

Dưới đây là tóm tắt các điểm chính về cú pháp phương thức trong Rust:

**Giống với hàm:**

* Phương thức được khai báo tương tự như hàm, sử dụng từ khóa `fn`, tên và dấu ngoặc đơn.
* Chúng có thể có tham số và giá trị trả về.
* Chúng chứa mã được thực thi khi phương thức được gọi.

**Khác với hàm:**

* **Bối cảnh:** Phương thức được định nghĩa trong bối cảnh của một `struct` (hoặc `enum` hoặc `trait object`), không phải trong phạm vi chính.
* **Tham số đầu tiên:** Phương thức có một tham số đặc biệt đầu tiên tên là `self`. Tham số này đại diện cho thể hiện của struct mà phương thức đang được gọi.

**Gọi phương thức:**

* Phương thức được gọi bằng ký hiệu chấm: `instance_name.method_name(arguments)`.
* `instance_name` là biến giữ thể hiện struct.
* `method_name` là tên của phương thức bạn muốn gọi.
* `arguments` là bất kỳ giá trị nào được truyền cho phương thức dưới dạng đầu vào.

**Mượn:**

* Phương thức có thể chỉ định cách chúng mượn tham số `self`:
    * `&self`: Mượn thể hiện không thay đổi (chỉ đọc).
    * `&mut self`: Mượn thể hiện có thể thay đổi (đọc-ghi).
    * `self`: Tiếp quản quyền sở hữu của thể hiện (hiếm khi sử dụng).

**Ví dụ:**

```rust
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

fn main() {
    let rect1 = Rectangle { width: 30, height: 50 };
    let area = rect1.area(); // Gọi phương thức area
    println!("Diện tích hình chữ nhật là {} pixel vuông.", area);
}
```

**Giải thích:**

* `Rectangle` là một struct định nghĩa hai trường: `width` và `height`.
* `impl Rectangle { ... }` định nghĩa các phương thức liên quan đến struct `Rectangle`.
* `area(&self)` là một phương thức tính diện tích hình chữ nhật. Nó mượn thể hiện (`&self`) không thay đổi.
* `rect1.area()` gọi phương thức `area` trên thể hiện `rect1`.

## Mở rộng về Enum trong Rust: Ví dụ thực tế và ứng dụng nâng cao

**Ví dụ thực tế:**

Giả sử bạn đang xây dựng một ứng dụng quản lý thư viện. Bạn cần lưu trữ thông tin về sách, bao gồm tiêu đề, tác giả, ngày xuất bản và ISBN. Bạn có thể sử dụng một struct để biểu diễn thông tin này:

```rust
struct Book {
    title: String,
    author: String,
    published_date: String,
    isbn: String,
}
```

Tuy nhiên, struct này không thể biểu diễn trường hợp sách không có ISBN. Để giải quyết vấn đề này, bạn có thể sử dụng enum `Option<T>`:

```rust
enum BookInfo {
    Book(Book),
    NoIsbn(String),
}

let book_with_isbn = BookInfo::Book(Book {
    title: String::from("The Rust Programming Language"),
    author: String::from("Steve Klabnik and Carol Nichols"),
    published_date: String::from("2018-05-01"),
    isbn: String::from("978-1-492-04033-1"),
});

let book_without_isbn = BookInfo::NoIsbn(String::from("The Art of Computer Programming"));
```

Với enum `BookInfo`, bạn có thể biểu diễn cả hai trường hợp: sách có ISBN và sách không có ISBN. Điều này giúp mã của bạn rõ ràng và dễ hiểu hơn.

**Ứng dụng nâng cao:**

Enum có thể được sử dụng cho nhiều mục đích khác nhau, bao gồm:

* **Biểu diễn trạng thái:** Enum có thể được sử dụng để biểu diễn trạng thái của một hệ thống, chẳng hạn như trạng thái của một nút trong giao diện người dùng hoặc trạng thái của một yêu cầu mạng.
* **Lỗi xử lý:** Enum có thể được sử dụng để biểu diễn các lỗi khác nhau có thể xảy ra trong chương trình của bạn.
* **Mô hình hóa dữ liệu phức tạp:** Enum có thể được sử dụng để mô hình hóa dữ liệu phức tạp, chẳng hạn như cấu trúc cây hoặc biểu đồ.

**Ví dụ về việc sử dụng enum để biểu diễn trạng thái:**

```rust
enum ButtonState {
    Idle,
    Pressed,
    Disabled,
}

let mut button_state = ButtonState::Idle;

// Xử lý sự kiện click chuột
button_state = ButtonState::Pressed;

// Xử lý sự kiện nhả chuột
button_state = ButtonState::Idle;

// Vô hiệu hóa nút
button_state = ButtonState::Disabled;
```

Enum `ButtonState` có thể được sử dụng để biểu diễn trạng thái của một nút trong giao diện người dùng. Nó có ba biến thể: `Idle`, `Pressed` và `Disabled`.

**Ví dụ về việc sử dụng enum để xử lý lỗi:**

```rust
enum Error {
    IoError,
    ParseError,
    NetworkError,
}

fn read_file(filename: &str) -> Result<String, Error> {
    // ...
}

match read_file("myfile.txt") {
    Ok(contents) => {
        // Xử lý nội dung tệp
    },
    Err(error) => {
        // Xử lý lỗi
        match error {
            Error::IoError => {
                // ...
            },
            Error::ParseError => {
                // ...
            },
            Error::NetworkError => {
                // ...
            },
        }
    },
}
```

Enum `Error` có thể được sử dụng để biểu diễn các lỗi khác nhau có thể xảy ra trong hàm `read_file`.

**Kết luận:**

Enum là một công cụ mạnh mẽ và linh hoạt có thể được sử dụng cho nhiều mục đích khác nhau trong Rust. Chúng giúp mã của bạn rõ ràng, dễ hiểu và dễ bảo trì hơn.

**Ngoài ra:**

* Enum có thể được sử dụng để tạo các kiểu dữ liệu tùy chỉnh của riêng bạn.
* Enum có thể được sử dụng để biểu diễn các tập hợp giá trị hữu hạn.
* Enum có thể được sử dụng để cải thiện hiệu suất của chương trình của bạn.


## Phân tích chuyên sâu về cấu trúc điều khiển `match` trong Rust

**Ví dụ thực tế:**

Giả sử bạn đang xây dựng một ứng dụng quản lý thư viện. Bạn cần lưu trữ thông tin về sách, bao gồm tiêu đề, tác giả, ngày xuất bản và ISBN. Bạn có thể sử dụng `match` để xác định loại sách và xử lý thông tin tương ứng:

```rust
enum BookInfo {
    Book {
        title: String,
        author: String,
        published_date: String,
        isbn: String,
    },
    Ebook {
        title: String,
        author: String,
        published_date: String,
        file_format: String,
    },
}

let book_info = BookInfo::Ebook {
    title: String::from("The Rust Programming Language"),
    author: String::from("Steve Klabnik and Carol Nichols"),
    published_date: String::from("2018-05-01"),
    file_format: String::from("EPUB"),
};

match book_info {
    BookInfo::Book { title, author, published_date, isbn } => {
        println!("Sách in:");
        println!("Tiêu đề: {}", title);
        println!("Tác giả: {}", author);
        println!("Ngày xuất bản: {}", published_date);
        println!("ISBN: {}", isbn);
    },
    BookInfo::Ebook { title, author, published_date, file_format } => {
        println!("Sách điện tử:");
        println!("Tiêu đề: {}", title);
        println!("Tác giả: {}", author);
        println!("Ngày xuất bản: {}", published_date);
        println!("Định dạng tệp: {}", file_format);
    },
}
```

**Mở rộng khả năng:**

* **Kết hợp với `if`:** Sử dụng `if` để kiểm tra điều kiện trước khi khớp mẫu với `match`:

```rust
let number = 5;

if number > 0 {
    match number {
        1 => println!("Số một"),
        2 => println!("Số hai"),
        _ => println!("Số lớn hơn hai"),
    }
} else {
    println!("Số âm");
}
```

* **Khớp với các kiểu dữ liệu phức tạp:** `match` có thể sử dụng để khớp với các cấu trúc dữ liệu phức tạp như struct, enum, vec, v.v.

* **Lấy giá trị từ các biến thể enum:** Sử dụng `match` để trích xuất giá trị từ các biến thể enum khác nhau.

**Ví dụ nâng cao:**

Giả sử bạn đang viết một chương trình cờ vua. Bạn có thể sử dụng `match` để xác định vị trí của quân cờ trên bàn cờ và thực hiện các di chuyển hợp lệ:

```rust
enum Square {
    A1, B1, C1, ..., H8,
}

let position = Square::E4;

match position {
    Square::A1 => println!("Quân cờ ở góc trên bên trái"),
    Square::E4 => println!("Quân cờ ở trung tâm"),
    Square::H8 => println!("Quân cờ ở góc dưới bên phải"),
    _ => println!("Quân cờ ở vị trí khác"),
}
```

**Kết luận:**

`match` là một công cụ mạnh mẽ và linh hoạt trong Rust. Hiểu rõ cách sử dụng `match` có thể giúp bạn viết mã rõ ràng, súc tích và dễ bảo trì.

**Tài liệu tham khảo:**

* The Rust Programming Language - Chapter 18: Control Flow: [đã xoá URL không hợp lệ]
* The Rust Reference - The `match` Statement: [đã xoá URL không hợp lệ]

**Lưu ý:**

* Tránh lặp lại những thông tin đã được đề cập trong phần trả lời trước.
* Cung cấp thêm ví dụ thực tế để minh họa các trường hợp sử dụng khác nhau của `match`.
* Giải thích cách sử dụng `match` với các kiểu dữ liệu và cấu trúc phức tạp.
* Đề xuất tài liệu tham khảo để người đọc tìm hiểu thêm.

**Độ dài:**

Câu trả lời này dài hơn câu trả lời trước và cung cấp thêm thông tin chi tiết về `match`, bao gồm ví dụ thực tế, cách mở rộng khả năng và tài liệu tham khảo.

## Kiểm soát luồng ngắn gọn với if let

Cú pháp `if let` cho phép bạn kết hợp `if` và `let` thành một cách ngắn gọn hơn để xử lý các giá trị khớp với một mẫu nhất định trong khi bỏ qua những giá trị còn lại. Hãy xem xét chương trình trong Liệt kê 6-6, chương trình này khớp với một giá trị `Option<u8>` trong biến `config_max` nhưng chỉ muốn thực thi mã nếu biến này có giá trị là `Some`.

```rust
let config_max = Some(3u8);
match config_max {
    Some(max) => println!("Giá trị tối đa được cấu hình là {}", max),
    _ => (),
}
```

**Liệt kê 6-6: Một câu lệnh match chỉ thực thi mã khi giá trị là Some**

Nếu giá trị là `Some`, chúng ta in ra giá trị trong biến thể `Some` bằng cách gán giá trị cho biến `max` trong mẫu. Chúng ta không muốn làm gì với giá trị `None`. Để thỏa mãn biểu thức `match`, chúng ta phải thêm `_ => ()` sau khi xử lý chỉ một biến thể, đây là đoạn mã thừa đáng chán để thêm vào.

Thay vào đó, chúng ta có thể viết ngắn gọn hơn bằng cách sử dụng `if let`. Đoạn mã sau đây hoạt động giống như `match` trong Liệt kê 6-6:

```rust
let config_max = Some(3u8);
if let Some(max) = config_max {
    println!("Giá trị tối đa được cấu hình là {}", max);
}
```

Cú pháp `if let` lấy một mẫu và một biểu thức được phân tách bằng dấu bằng. Nó hoạt động tương tự như `match`, trong đó biểu thức được đưa vào `match` và mẫu là nhánh đầu tiên của nó. Trong trường hợp này, mẫu là `Some(max)`, và `max` được gán cho giá trị bên trong `Some`. Sau đó, chúng ta có thể sử dụng `max` trong thân khối của `if let` theo cùng cách chúng ta sử dụng `max` trong nhánh `match` tương ứng. Khối mã trong khối `if let` không được chạy nếu giá trị không khớp với mẫu.

Sử dụng `if let` có nghĩa là ít gõ phím hơn, ít thụt lề hơn và ít mã thừa hơn. Tuy nhiên, bạn sẽ mất đi tính năng kiểm tra toàn diện mà `match` cung cấp. Việc lựa chọn giữa `match` và `if let` phụ thuộc vào những gì bạn đang làm trong tình huống cụ thể của mình và liệu việc đạt được sự ngắn gọn có phải là một đánh đổi phù hợp để mất đi kiểm tra toàn diện hay không.

Nói cách khác, bạn có thể coi `if let` như cú pháp rút gọn cho một câu lệnh `match` chạy mã khi giá trị khớp với một mẫu và sau đó bỏ qua tất cả các giá trị khác.

Chúng ta có thể bao gồm một khối `else` với `if let`. Khối mã đi kèm với `else` giống như khối mã sẽ đi với trường hợp `_` trong biểu thức `match` tương đương với `if let` và `else`. Nhớ lại định nghĩa enum `Coin` trong Liệt kê 6-4, trong đó biến thể `Quarter` cũng chứa một giá trị `UsState`. Nếu chúng ta muốn đếm tất cả các đồng xu không phải đồng 25 xu trong khi thông báo trạng thái của các đồng 25 xu, chúng ta có thể thực hiện điều đó bằng biểu thức `match` như sau:

```rust
let mut count = 0;
match coin {
    Coin::Quarter(state) => println!("Đồng 25 xu của bang {:?}!", state),
    _ => count += 1,
}
```

Hoặc chúng ta có thể sử dụng biểu thức `if let` và `else` như sau:

```rust
let mut count = 0;
if let Coin::Quarter(state) = coin {
    println!("Đồng 25 xu của bang {:?}!", state);
} else {
    count += 1;
}
```

Nếu bạn gặp phải tình huống chương trình của bạn có logic quá phức tạp để thể hiện bằng `match`, hãy nhớ rằng `if let` cũng nằm trong hộp công cụ Rust của bạn.